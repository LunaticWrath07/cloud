AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.10.0.0/16
    PublicSubnet1:
      CIDR: 10.10.1.0/24
    PrivateSubnet1:
      CIDR: 10.10.2.0/24
    PublicSubnet2:
      CIDR: 10.10.3.0/24
    PrivateSubnet2:
      CIDR: 10.10.4.0/24
    PublicSubnet3:
      CIDR: 10.10.5.0/24
    PrivateSubnet3:
      CIDR: 10.10.6.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: msk-redshift-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicSubnet1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicSubnet2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicSubnet3
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-3
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: internet-gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PrimaryNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  SecondaryNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  
  ThirdNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  PrimaryNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PrimaryNatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  SecondaryNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt SecondaryNatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  ThirdNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ThirdNatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-route-table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2  
  
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  MSKConnectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: msk-connect-sg
      GroupDescription: MSK Connect Security Group attached to the data generator connector
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: allows all outbound traffic
          IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: msk-connect-sg
  MSKClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - MSKConnectSecurityGroup
    Properties:
      GroupName: msk-cluster-sg
      GroupDescription: MSK Cluster Security Group attached to the MSK Cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: allows all traffic from the security group used by the Redshift cluster
          IpProtocol: '-1'
          SourceSecurityGroupId: !GetAtt RedshiftSecurityGroup.GroupId
      SecurityGroupEgress:
        - Description: allows all outbound traffic
          IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: msk-cluster-sg

  MSKSGSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: MSK SG Self Referencing Rule
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      GroupId: !GetAtt [MSKClusterSecurityGroup, GroupId]
      SourceSecurityGroupId: !GetAtt [MSKClusterSecurityGroup, GroupId]

  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: redshift-sg
      GroupDescription: Redshift Security Group attached to the Redshift Cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: !FindInMap
            - SubnetConfig
            - VPC
            - CIDR
          Description: 'Redshift Access to on prem users CIDR'
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 52.23.63.224/27
          Description: 'Redshift Access to QuickSight us-east-1'
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 54.70.204.128/27
          Description: 'Redshift Access to QuickSight us-west-2'
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 52.15.247.160/27
          Description: 'Redshift Access to QuickSight us-east-2'
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 52.56.207.240/28
          Description: 'Redshift Access to QuickSight eu-west-2'
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          CidrIp: 52.76.0.0/17
          Description: 'Redshift Access to QuickSight ap-southeast-1 '    
      SecurityGroupEgress:
        - Description: allows all outbound traffic
          IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: redshift-sg
  
  SecurityGroupSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Self Referencing Rule
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      GroupId: !GetAtt [RedshiftSecurityGroup, GroupId]
      SourceSecurityGroupId: !GetAtt [RedshiftSecurityGroup, GroupId]

  MSKClusterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: msk-cluster-logs
      RetentionInDays: 180
      Tags:
        - Key: Name
          Value: msk-cluster-logs
  MSKClusterConfiguration:
    Type: AWS::MSK::Configuration
    Properties:
      Name: custom-msk-cluster-configuration
      Description: Custom cluster configuration for MSK
      ServerProperties: |
        auto.create.topics.enable=true
        default.replication.factor=3
        min.insync.replicas=2
        num.io.threads=8
        num.network.threads=5
        num.partitions=1
        num.replica.fetchers=2
        replica.lag.time.max.ms=30000
        socket.receive.buffer.bytes=102400
        socket.request.max.bytes=104857600
        socket.send.buffer.bytes=102400
        unclean.leader.election.enable=true
        zookeeper.session.timeout.ms=18000
        log.retention.hours=24
  MSKConnectIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kafkaconnect.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      RoleName: msk-connect-role
      Policies:
        - PolicyName: msk-connect-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kafka-cluster:Connect
                  - kafka-cluster:DescribeCluster
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*
              - Effect: Allow
                Action:
                  - kafka-cluster:ReadData
                  - kafka-cluster:DescribeTopic
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*
              - Effect: Allow
                Action:
                  - kafka-cluster:WriteData
                  - kafka-cluster:DescribeTopic
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*
              - Effect: Allow
                Action:
                  - kafka-cluster:CreateTopic
                  - kafka-cluster:WriteData
                  - kafka-cluster:ReadData
                  - kafka-cluster:DescribeTopic
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*/*/*
              - Effect: Allow
                Action:
                  - kafka-cluster:AlterGroup
                  - kafka-cluster:DescribeGroup
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*/*/*
  RedshiftIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      RoleName: redshift-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: redshift-msk-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: KafkaPermissions
                Effect: Allow
                Action: kafka:GetBootstrapBrokers
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*/*
              - Sid: MSKClusterPermissions
                Effect: Allow
                Action:
                  - kafka-cluster:ReadData
                  - kafka-cluster:DescribeTopic
                  - kafka-cluster:Connect
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*/*
              - Sid: MSKTopicPermissions
                Effect: Allow
                Action:
                  - kafka-cluster:DescribeTopic
                  - kafka-cluster:ReadData
                Resource: !Sub arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*/*/*
  
  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Redshift subnet group within the custom-vpc, using the three private subnets
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: redshift-subnet-group
  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        InstanceType: kafka.m7g.large
        SecurityGroups:
          - !GetAtt MSKClusterSecurityGroup.GroupId
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
        Unauthenticated:
          Enabled: true
      ClusterName: msk-cluster
      ConfigurationInfo:
        Arn: !Ref MSKClusterConfiguration
        Revision: '1'
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT
          InCluster: true
      EnhancedMonitoring: PER_TOPIC_PER_BROKER
      KafkaVersion: 3.5.1
      LoggingInfo:
        BrokerLogs:
          CloudWatchLogs:
            Enabled: true
            LogGroup: msk-cluster-logs
      NumberOfBrokerNodes: 4

  RedshiftSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RedshiftPasswordSecret
      Description: "Secret for Redshift master user password"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "awsuser"}'
        GenerateStringKey: "password"
        PasswordLength: 10
        ExcludeCharacters: "/@\"' \\"
        ExcludePunctuation: true
        ExcludeLowercase: false
        ExcludeUppercase: false
        ExcludeNumbers: false
        RequireEachIncludedType: true
      Tags:
        - Key: RedshiftSecret
          Value: "Managed secret"

  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Redshift Cluster Parameter Grup with Auto WLM
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: 'true'
        - ParameterName: require_ssl
          ParameterValue: 'true'
        - ParameterName: auto_analyze
          ParameterValue: 'true'
        - ParameterName: max_concurrency_scaling_clusters
          ParameterValue: '1'
        - ParameterName: 'wlm_json_configuration'
          ParameterValue: '[ { "query_group" : [ ],"query_group_wild_card" : 0,"user_group" : [ ],"user_group_wild_card" : 0,"concurrency_scaling" : "off","rules" : [ {  "rule_name" : "DiskSpilling",  "predicate" : [ { "metric_name" : "query_temp_blocks_to_disk", "operator" : ">", "value" : 100000  } ], "action" : "log"}, {  "rule_name" : "QueryRunningMoreThan30min",  "predicate" : [ { "metric_name" : "query_execution_time", "operator" : ">", "value" : 1800 } ],  "action" : "log"} ],"priority" : "normal","queue_type" : "auto","auto_wlm" : true }, {"short_query_queue" : true } ]'
      Tags:
        - Key: Name
          Value:
            !Join [
              '-',
              [
                !Ref 'AWS::StackName',
                'ClusterParametergroup',
              ],
            ]
  
  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterIdentifier: msk-rs-streaming-cluster
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      ClusterType: single-node
      DBName: dev
      Encrypted: 'true'
      EnhancedVpcRouting: 'true'
      IamRoles:
        - !GetAtt RedshiftIAMRole.Arn
      MasterUsername: !Sub '{{resolve:secretsmanager:${RedshiftSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RedshiftSecret}:SecretString:password}}'
      NodeType: ra3.xlplus
      VpcSecurityGroupIds:
        - !Ref RedshiftSecurityGroup
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub msk-redshift-stream-${AWS::Region}-${AWS::AccountId}
      Tags:
        - Key: Name
          Value: msk-redshift-stream-bucket
Outputs:
  S3BucketName:
    Description: The name of the S3 bucket
    Value: !Ref S3Bucket
    
  RedshiftIAMRoleARN:
    Description: "ARN of the IAM Role for Redshift"
    Value: !GetAtt RedshiftIAMRole.Arn
    
  MSKClusterARN:
    Description: "ARN of the Amazon MSK cluster"
    Value: !Ref MSKCluster

  RedshiftSecretName:
    Description: "Name of the Redshift Secret"
    Value: !Ref RedshiftSecret
    